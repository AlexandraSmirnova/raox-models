enum Место_дырки {справа, слева, сверху, снизу, дырки_рядом_нет}

type Фишка {
	int Номер;
	int Местоположение;
}

type Дырка_t {
	int Место;
}

resource Фишка1 = Фишка.create(1, 2);
resource Фишка2 = Фишка.create(2, 3);
resource Фишка3 = Фишка.create(3, 6);
resource Фишка4 = Фишка.create(4, 4);
resource Фишка5 = Фишка.create(5, 5);
resource Дырка = Дырка_t.create(1);

rule Перемещение_фишки (Место_дырки Куда_перемещать, int На_сколько_перемещать) {
	relevant _Фишка =  Фишка.select(Где_дырка(_Фишка.Местоположение) == Куда_перемещать).first();
	relevant _Дырка = Дырка_t.select(any).first();
	set execute() {
		_Фишка.Местоположение = _Фишка.Местоположение + На_сколько_перемещать;
		_Дырка.Место = _Дырка.Место - На_сколько_перемещать;
	}
}

constant int Длина_поля = 3;

int Ряд(int Местоположение) {
	return (Местоположение - 1)/Длина_поля + 1;
}

int Остаток_от_деления(int Делимое, int Делитель) {
	int Целая_часть  = Делимое/Делитель;
	int Макс_делимое = Делитель * Целая_часть;
	return Делимое -  Макс_делимое;
}

int Столбец(int Местоположение) {
	return Остаток_от_деления(Местоположение - 1,Длина_поля) + 1;
}

Место_дырки Где_дырка(int _Место) {
	if (Столбец(_Место) == Столбец(Дырка.Место) and Ряд(_Место) == Ряд(Дырка.Место)+ 1) return Место_дырки.сверху;
	if (Столбец(_Место) == Столбец(Дырка.Место) and Ряд(_Место) == Ряд(Дырка.Место)- 1) return Место_дырки.снизу;
	if (Ряд(_Место) == Ряд(Дырка.Место) and Столбец(_Место) == Столбец(Дырка.Место)- 1) return Место_дырки.справа;
	if (Ряд(_Место) == Ряд(Дырка.Место) and Столбец(_Место) == Столбец(Дырка.Место)+ 1) return Место_дырки.слева;
	return Место_дырки.дырки_рядом_нет;
}

int Фишка_на_месте(int _Номер, int _Место) {
	if (_Номер == _Место)
		return 1;
	else
		return 0;
}

int Кол_во_фишек_не_на_месте() {
	return 5 - (Фишка_на_месте(Фишка1.Номер, Фишка1.Местоположение)+
			Фишка_на_месте(Фишка2.Номер, Фишка2.Местоположение)+
			Фишка_на_месте(Фишка3.Номер, Фишка3.Местоположение)+
			Фишка_на_месте(Фишка4.Номер, Фишка4.Местоположение)+
			Фишка_на_месте(Фишка5.Номер, Фишка5.Местоположение));
}

int Расстояние_фишки_до_места(int Откуда, int Куда) {
	return Math.abs(Ряд(Откуда)-Ряд(Куда)) + Math.abs(Столбец(Откуда)-Столбец(Куда));
}

int Расстояния_фишек_до_мест() {
	return Расстояние_фишки_до_места(Фишка1.Номер, Фишка1.Местоположение)+
			Расстояние_фишки_до_места(Фишка2.Номер, Фишка2.Местоположение)+
			Расстояние_фишки_до_места(Фишка3.Номер, Фишка3.Местоположение)+
			Расстояние_фишки_до_места(Фишка4.Номер, Фишка4.Местоположение)+
			Расстояние_фишки_до_места(Фишка5.Номер, Фишка5.Местоположение);
}

search Расстановка_фишек {
	set init() {
		setCondition(exist(Фишка: Фишка.Номер != Фишка.Местоположение));
		setTerminateCondition(forAll(Фишка: Фишка.Номер == Фишка.Местоположение));
		compareTops(true);
		evaluateBy(0);
	}
	activity Перемещение_вправо checks Перемещение_фишки(Место_дырки.справа,  1).setValueAfter(1);
	activity Перемещение_влево checks Перемещение_фишки(Место_дырки.слева,  -1).setValueAfter(1);
	activity Перемещение_вверх checks Перемещение_фишки(Место_дырки.сверху,  -3).setValueAfter(1);
	activity Перемещение_вниз checks Перемещение_фишки(Место_дырки.снизу,  3).setValueAfter(1);
}
