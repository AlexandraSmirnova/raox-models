enum Тип_клиента {Тип1, Тип2}
enum Состояние_клиента {Пришел, Начал_стрижку}
enum Состояние_парикмахера {Свободен, Занят}

type Парикмахерские {
	int количество_в_очереди;
}

type Клиенты {
	Тип_клиента тип;
	Состояние_клиента состояние;
}

type Парикмахеры {
	Состояние_парикмахера состояние_парикмахера = Состояние_парикмахера.Свободен;
	int количество_обслуженных;
	int длительность_min;
	int длительность_max;
	Тип_клиента тип_клиента;
}

resource парикмахерская = Парикмахерские.create(0);
resource парикмахер_1 = Парикмахеры.create(Состояние_парикмахера.Свободен, 0, 20, 40, Тип_клиента.Тип1);
resource парикмахер_2 = Парикмахеры.create(Состояние_парикмахера.Свободен, 0, 25, 70, Тип_клиента.Тип2);
resource парикмахер_3 = Парикмахеры.create(Состояние_парикмахера.Свободен, 0, 30, 60, Тип_клиента.Тип2);

event Событие_прихода_клиента() {
	Клиенты.create(случайный_тип_клиента.next(), Состояние_клиента.Пришел);
	Событие_прихода_клиента.plan(currentTime + интервал_прихода.next());
	парикмахерская.количество_в_очереди = парикмахерская.количество_в_очереди + 1;
}

operation Образец_обслуживания_клиента() {
	relevant _Парикмахерская = парикмахерская.onlyif[количество_в_очереди > 0];
	relevant _Клиент = Клиенты.all.filter[состояние == Состояние_клиента.Пришел].any;
	relevant _Парикмахер = Парикмахеры.all.filter [
		состояние_парикмахера == Состояние_парикмахера.Свободен && тип_клиента == _Клиент.тип
	].minBySafe[количество_обслуженных];

	set duration() {
		return длительность_обслуживания.next(_Парикмахер.длительность_min, _Парикмахер.длительность_max);
	}

	set begin() {
		_Парикмахерская.количество_в_очереди = _Парикмахерская.количество_в_очереди - 1;
		_Клиент.состояние = Состояние_клиента.Начал_стрижку;
		_Парикмахер.состояние_парикмахера = Состояние_парикмахера.Занят;
	}

	set end() {
		_Парикмахер.состояние_парикмахера = Состояние_парикмахера.Свободен;
		_Парикмахер.количество_обслуженных = _Парикмахер.количество_обслуженных + 1;
		_Клиент.erase();
	}
}

logic Model {
	activity обслуживание_клиента = new Activity(Образец_обслуживания_клиента.create());
}

sequence интервал_прихода = new Exponential(123456789, 1 / 30.0);
sequence длительность_обслуживания = new Uniform(123456789);
sequence случайный_тип_клиента = new DiscreteHistogram<Тип_клиента>(123456789,
	#[Тип_клиента.Тип1 -> 1.0, Тип_клиента.Тип2 -> 5.0]);

set init() {
	Событие_прихода_клиента.plan(currentTime + интервал_прихода.next());
}

set terminateCondition() {
	return currentTime >= 7 * 12 * 60;
}

resultType Занятость_парикмахера<Состояние_парикмахера>(Парикмахеры парикмахер) {
	set evaluate() {
		return парикмахер.состояние_парикмахера
	}
}

result занятость_парикмахера_1 = new Занятость_парикмахера(парикмахер_1);
result занятость_парикмахера_2 = new Занятость_парикмахера(парикмахер_2);
result занятость_парикмахера_3 = new Занятость_парикмахера(парикмахер_3);
result обслужено_парикмахером_1 = new Value([парикмахер_1.количество_обслуженных]);
result обслужено_парикмахером_2 = new Value([парикмахер_2.количество_обслуженных]);
result обслужено_парикмахером_3 = new Value([парикмахер_3.количество_обслуженных]);
