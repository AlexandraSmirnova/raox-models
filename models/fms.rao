constant double Длительность_погрузки_на_тележку = 1.5;
constant double Длительность_доставки_тележкой = 2.0;
constant double Длительность_устаноки_на_станок = 1.0;
constant double Длительность_разгрузки_станка = 0.5;
constant double Длительность_возврата_робота = 0.2;

sequence Экспоненциальный = double exponential(123456789);

enum Положение {
	станок_1,
	станок_2,
	станок_3,
	накопитель_1,
	накопитель_2,
	тележка_1_н, тележка_1_к,
	тележка_2_н, тележка_2_к,
	нигде
}

type Накопители {
	Положение положение;
	int номер;
	int максимальное_количество = 25;
	int текущее_количество = 0;
}
resource Накопитель_1 = Накопители.create(Положение.накопитель_1, 1, *, 10);
resource Накопитель_2 = Накопители.create(Положение.накопитель_2, 2, *, *);

enum Состояние_тележки {свободна, занята, загружена, перемещается, прибыла, ожидает}
type Тележки {
	int номер;
	Положение положение;
	Состояние_тележки состояние = Состояние_тележки.свободна;
}
resource Тележка_1 = Тележки.create(1, Положение.тележка_1_н, *);
resource Тележка_2 = Тележки.create(2, Положение.тележка_2_н, *);

enum Состояние_робота {свободен, занят}
type Роботы {
	int номер;
	Положение положение;
	Состояние_робота состояние = Состояние_робота.свободен;
}
resource Робот_1 = Роботы.create(1, Положение.накопитель_1, *);
resource Робот_2 = Роботы.create(2, Положение.тележка_1_к, *);
resource Робот_3 = Роботы.create(3, Положение.тележка_2_к, *);

enum Состояние_станка {свободен, загружается, готов_к_обработке, работает, разгружается, закончил_обработку}
type Станки {
	int номер;
	Положение положение;
	Состояние_станка состояние = Состояние_станка.свободен;
	double длительность_обработки;
}
resource Станок_1 = Станки.create(1, Положение.станок_1, *, 28);
resource Станок_2 = Станки.create(2, Положение.станок_2, *, 28);
resource Станок_3 = Станки.create(3, Положение.станок_3, *, 15);

enum Состояние_детали {хранится, транспортируется, обрабатывается, обработка_закончена}
type Детали {
	int номер;
	Положение положение = Положение.накопитель_1;
	Состояние_детали состояние = Состояние_детали.хранится;
}
resource Деталь_1 = Детали.create(1, *, *);
resource Деталь_2 = Детали.create(2, *, *);
resource Деталь_3 = Детали.create(3, *, *);
resource Деталь_4 = Детали.create(4, *, *);
resource Деталь_5 = Детали.create(5, *, *);
resource Деталь_6 = Детали.create(6, *, *);
resource Деталь_7 = Детали.create(7, *, *);
resource Деталь_8 = Детали.create(8, *, *);
resource Деталь_9 = Детали.create(9, *, *);
resource Деталь_10 = Детали.create(10, *, *);

event Таймер() {
	Таймер.plan(currentTime + 0.5);
}

set init() {
//	Таймер.plan(0);
}
set terminateCondition() {
	return Накопитель_2.текущее_количество == 10 or currentTime >= 1000;
}

operation Погрузка_детали() {
	relevant накопитель = Накопители.select(накопитель.номер == 1
		and накопитель.текущее_количество > 0
	);
	relevant деталь = Детали.select(деталь.положение == Положение.накопитель_1
	);
	relevant робот = Роботы.select(робот.номер == 1
		and робот.положение == Положение.накопитель_1
		and робот.состояние == Состояние_робота.свободен
	);
	relevant тележка = Тележки.select(тележка.номер == 1
		and тележка.положение == Положение.тележка_1_н
		and тележка.состояние == Состояние_тележки.свободна
	);

	set begin() {
		накопитель.текущее_количество--;

		деталь.состояние = Состояние_детали.транспортируется;
		робот.состояние = Состояние_робота.занят;
		тележка.состояние = Состояние_тележки.занята;

		робот.положение = Положение.нигде;
		деталь.положение = робот.положение;
	}

	set duration() {
		return Экспоненциальный.next(1.0/Длительность_погрузки_на_тележку);
	}

	set end() {
		робот.состояние = Состояние_робота.свободен;
		тележка.состояние = Состояние_тележки.загружена;

		робот.положение = Положение.тележка_1_н;
		деталь.положение = робот.положение;
	}
}

operation Доставка_детали(int номер_тележки, Положение откуда, Положение куда) {
	relevant тележка = Тележки.select(тележка.положение == откуда
		and тележка.состояние == Состояние_тележки.загружена
	);
	relevant деталь = Детали.select(деталь.положение == откуда
	);

	set begin() {
		тележка.состояние = Состояние_тележки.перемещается;
	}

	set duration() {
		return Экспоненциальный.next(1.0/Длительность_доставки_тележкой);
	}

	set end() {
		тележка.состояние = Состояние_тележки.прибыла;

		тележка.положение = куда;
		деталь.положение = тележка.положение;
	}
}

operation Установка_на_станке(Положение положение_станка, Положение положение_детали) {
	relevant станок = Станки.select(станок.положение == положение_станка
		and станок.состояние == Состояние_станка.свободен
	);
	relevant тележка = Тележки.select(тележка.положение == положение_детали
		and тележка.состояние == Состояние_тележки.прибыла
	);
	relevant робот = Роботы.select(робот.положение == положение_детали
		and робот.состояние == Состояние_робота.свободен
	);
	relevant деталь = Детали.select(деталь.положение == положение_детали);

	set begin() {
		станок.состояние = Состояние_станка.загружается;
		тележка.состояние = Состояние_тележки.ожидает;
		робот.состояние = Состояние_робота.занят;
	}

	set duration() {
		return Экспоненциальный.next(1.0/Длительность_устаноки_на_станок);
	}

	set end() {
		станок.состояние = Состояние_станка.готов_к_обработке;
		тележка.состояние = Состояние_тележки.свободна;
		робот.состояние = Состояние_робота.свободен;

		робот.положение = станок.положение;
		деталь.положение = станок.положение;
	}
}

operation Обработка_на_станке(Положение положение_станка) {
	relevant станок = Станки.select(станок.положение == положение_станка
		and станок.состояние == Состояние_станка.готов_к_обработке
	);
	relevant деталь = Детали.select(деталь.положение == положение_станка
	);

	set begin() {
		станок.состояние = Состояние_станка.работает;
		деталь.состояние = Состояние_детали.обрабатывается;
	}

	set duration() {
		return станок.длительность_обработки;
	}

	set end() {
		станок.состояние = Состояние_станка.закончил_обработку;
		деталь.состояние = Состояние_детали.обработка_закончена;
	}
}

operation Перегрузка_со_станка_на_тележку(Положение положение_станка) {
	relevant станок = Станки.select(станок.положение == положение_станка
		and станок.состояние == Состояние_станка.закончил_обработку
	);
	relevant робот = Роботы.select(робот.состояние == Состояние_робота.свободен
		and робот_связан_со_станком(робот.номер, станок.номер)
	);
	relevant тележка = Тележки.select(тележка.номер == 2
		and тележка.состояние == Состояние_тележки.свободна
//	  and тележка.положение == Положение.тележка_2_н
	);
	relevant деталь = Детали.select(деталь.положение == положение_станка
	);

	set begin() {
		станок.состояние = Состояние_станка.разгружается;
		робот.состояние = Состояние_робота.занят;
		тележка.состояние = Состояние_тележки.занята;
		деталь.состояние = Состояние_детали.транспортируется;
	}

	set duration() {
		return Экспоненциальный.next(1.0/Длительность_разгрузки_станка);
	}

	set end() {
		станок.состояние = Состояние_станка.свободен;
		робот.состояние = Состояние_робота.свободен;
		тележка.состояние = Состояние_тележки.загружена;

		робот.положение = Положение.тележка_2_н;
		деталь.положение = робот.положение;
	}
}

boolean робот_связан_со_станком(int номер_робота, int номер_станка)
{
	if (номер_робота == 2)
		return номер_станка == 1 or номер_станка == 2;
	else if (номер_робота == 3)
		return номер_станка == 3;

	return false;
}

operation Окончание_обработки_на_станке_3() {
	relevant станок = Станок_3.select(Станок_3.состояние == Состояние_станка.закончил_обработку
	);
	relevant деталь = Детали.select(деталь.положение == станок.положение
	);
	relevant накопитель = Накопитель_2.select(any
	);

	set begin() {
		станок.состояние = Состояние_станка.разгружается;
		деталь.состояние = Состояние_детали.транспортируется;
	}

	set duration() {
		return Экспоненциальный.next(1.0/Длительность_разгрузки_станка);
	}

	set end() {
		станок.состояние = Состояние_станка.свободен;
		деталь.положение = накопитель.положение;
		накопитель.текущее_количество++;
	}
}

operation Возврат_робота() {
	relevant робот = Роботы.select(робот.положение != место_возврата_робота(робот.положение)
		and робот.состояние == Состояние_робота.свободен
	);

	set begin() {
		робот.состояние = Состояние_робота.занят;
	}

	set duration() {
		return Длительность_возврата_робота;
	}

	set end() {
		робот.состояние = Состояние_робота.свободен;
		робот.положение = место_возврата_робота(робот.положение);
	}
}

Положение место_возврата_робота(Положение текущее_место) {
	if (текущее_место == Положение.тележка_1_н)
		return Положение.накопитель_1;
	else if (текущее_место == Положение.станок_1 || текущее_место == Положение.станок_2 || текущее_место == Положение.тележка_2_н)
		return Положение.тележка_1_к;
	else if (текущее_место == Положение.станок_3)
		return Положение.тележка_2_к;
	else
		return текущее_место;
}

operation Возврат_тележки(int номер_тележки, Положение откуда, Положение куда) {
	relevant тележка = Тележки.select(тележка.положение == откуда
		and тележка.состояние == Состояние_тележки.свободна
	);

	set begin() {
		тележка.состояние = Состояние_тележки.занята;
	}

	set duration () {
		return Экспоненциальный.next(1.0/Длительность_доставки_тележкой);
	}

	set end() {
		тележка.состояние = Состояние_тележки.свободна;
		тележка.положение = куда;
	}
}

dpt model {
	activity погрузка_детали checks Погрузка_детали();
	activity доставка_детали_на_тележке_1 checks Доставка_детали(1, Положение.тележка_1_н, Положение.тележка_1_к);
	activity доставка_детали_на_тележке_2 checks Доставка_детали(2, Положение.тележка_2_н, Положение.тележка_2_к);
	activity установка_на_станке_1 checks Установка_на_станке(Положение.станок_1, Положение.тележка_1_к);
	activity установка_на_станке_2 checks Установка_на_станке(Положение.станок_2, Положение.тележка_1_к);
	activity установка_на_станке_3 checks Установка_на_станке(Положение.станок_3, Положение.тележка_2_к);
	activity обработка_на_станке_1 checks Обработка_на_станке(Положение.станок_1);
	activity обработка_на_станке_2 checks Обработка_на_станке(Положение.станок_2);
	activity обработка_на_станке_3 checks Обработка_на_станке(Положение.станок_3);
	activity перегрузка_со_станка_1_на_тележку checks Перегрузка_со_станка_на_тележку(Положение.станок_1);
	activity перегрузка_со_станка_2_на_тележку checks Перегрузка_со_станка_на_тележку(Положение.станок_2);
	activity окончание_обработки_на_станке_3 checks Окончание_обработки_на_станке_3();

	activity возврат_робота checks Возврат_робота();
	activity возврат_тележки_1 checks Возврат_тележки(1, Положение.тележка_1_к, Положение.тележка_1_н);
	activity возврат_тележки_2 checks Возврат_тележки(2, Положение.тележка_2_к, Положение.тележка_2_н);
}

String Положение_toString(Положение положение) {
	if (положение == Положение.станок_1)
		return 'станок_1';
	else if (положение == Положение.станок_2)
		return 'станок_2';
	else if (положение == Положение.станок_3)
		return 'станок_3';
	else if (положение == Положение.накопитель_1)
		return 'накопитель_1';
	else if (положение == Положение.накопитель_2)
		return 'накопитель_2';
	else if (положение == Положение.тележка_1_н)
		return 'тележка_1_н';
	else if (положение == Положение.тележка_1_к)
		return 'тележка_1_к';
	else if (положение == Положение.тележка_2_н)
		return 'тележка_2_н';
	else if (положение == Положение.тележка_2_к)
		return 'тележка_2_к';
	else if (положение == Положение.нигде)
		return 'нигде';
	return '';
}

String Состояние_станка_toString(Состояние_станка состояние) {
	if (состояние == Состояние_станка.свободен)
		return 'свободен';
	else if (состояние == Состояние_станка.загружается)
		return 'загружается';
	else if (состояние == Состояние_станка.готов_к_обработке)
		return 'готов_к_обработке';
	else if (состояние == Состояние_станка.работает)
		return 'работает';
	else if (состояние == Состояние_станка.разгружается)
		return 'разгружается';
	else if (состояние == Состояние_станка.закончил_обработку)
		return 'закончил_обработку';
	return '';
}

String Состояние_тележки_toString(Состояние_тележки состояние) {
	if (состояние == Состояние_тележки.свободна)
		return 'свободна';
	else if (состояние == Состояние_тележки.занята)
		return 'занята';
	else if (состояние == Состояние_тележки.загружена)
		return 'загружена';
	else if (состояние == Состояние_тележки.перемещается)
		return 'перемещается';
	else if (состояние == Состояние_тележки.прибыла)
		return 'прибыла';
	else if (состояние == Состояние_тележки.ожидает)
		return 'ожидает';
	return '';
}

String Состояние_робота_toString(Состояние_робота состояние) {
	if (состояние == Состояние_робота.свободен)
		return 'свободен';
	else if (состояние == Состояние_робота.занят)
		return 'занят';
	return '';
}

String Состояние_детали_toString(Состояние_детали состояние) {
	if (состояние == Состояние_детали.хранится)
		return 'хранится';
	else if (состояние == Состояние_детали.транспортируется)
		return 'транспортируется';
	else if (состояние == Состояние_детали.обрабатывается)
		return 'обрабатывается';
	else if (состояние == Состояние_детали.обработка_закончена)
		return 'обработка_закончена';
	return '';
}

frame frame_1 {
	background(800, 600, color(255, 255, 255));

	text(10, 5,  50, 25, color(255, 255, 255), color(0, 0, 0), 'Время:');
	text(60, 5, 150, 25, color(255, 255, 255), color(0, 0, 0), Double.toString(currentTime));

	text(10, 70, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Станок 1');
	text(350, 70, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_станка_toString(Станок_1.состояние));
	text(500, 70, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Станок_1.положение));
	text(10, 85, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Станок 2');
	text(350, 85, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_станка_toString(Станок_2.состояние));
	text(500, 85, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Станок_2.положение));
	text(10, 100, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Станок 3');
	text(350, 100, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_станка_toString(Станок_3.состояние));
	text(500, 100, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Станок_3.положение));

	text(10, 120, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Тележка_1');
	text(350, 120, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_тележки_toString(Тележка_1.состояние));
	text(500, 120, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Тележка_1.положение));
	text(10, 135, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Тележка_2');
	text(350, 135, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_тележки_toString(Тележка_2.состояние));
	text(500, 135, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Тележка_2.положение));

	text(10, 155, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Робот_1');
	text(350, 155, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_робота_toString(Робот_1.состояние));
	text(500, 155, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Робот_1.положение));
	text(10, 170, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Робот_2');
	text(350, 170, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_робота_toString(Робот_2.состояние));
	text(500, 170, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Робот_2.положение));
	text(10, 185, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Робот_3');
	text(350, 185, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_робота_toString(Робот_3.состояние));
	text(500, 185, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Робот_3.положение));

	text(10, 205, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Кол-во детале в 1-м накопителе');
	text(350, 205, 350, 25, color(255, 255, 255), color(0, 0, 0), Integer.toString(Накопитель_1.текущее_количество));
	text(10, 220, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Кол-во детале в 2-м накопителе');
	text(350, 220, 350, 25, color(255, 255, 255), color(0, 0, 0), Integer.toString(Накопитель_2.текущее_количество));

	text(10, 300, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Деталь 1');
	text(250, 300, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Деталь_1.положение));
	text(350, 300, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_детали_toString(Деталь_1.состояние));
	text(10, 315, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Деталь 2');
	text(250, 315, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Деталь_2.положение));
	text(350, 315, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_детали_toString(Деталь_2.состояние));
	text(10, 330, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Деталь 3');
	text(250, 330, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Деталь_3.положение));
	text(350, 330, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_детали_toString(Деталь_3.состояние));
	text(10, 345, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Деталь 4');
	text(250, 345, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Деталь_4.положение));
	text(350, 345, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_детали_toString(Деталь_4.состояние));
	text(10, 360, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Деталь 5');
	text(250, 360, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Деталь_5.положение));
	text(350, 360, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_детали_toString(Деталь_5.состояние));
	text(10, 375, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Деталь 6');
	text(250, 375, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Деталь_6.положение));
	text(350, 375, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_детали_toString(Деталь_6.состояние));
	text(10, 390, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Деталь 7');
	text(250, 390, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Деталь_7.положение));
	text(350, 390, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_детали_toString(Деталь_7.состояние));
	text(10, 405, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Деталь 8');
	text(250, 405, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Деталь_8.положение));
	text(350, 405, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_детали_toString(Деталь_8.состояние));
	text(10, 420, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Деталь 9');
	text(250, 420, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Деталь_9.положение));
	text(350, 420, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_детали_toString(Деталь_9.состояние));
	text(10, 435, 350, 25, color(255, 255, 255), color(0, 0, 0), 'Деталь 10');
	text(250, 435, 350, 25, color(255, 255, 255), color(0, 0, 0), Положение_toString(Деталь_10.положение));
	text(350, 435, 350, 25, color(255, 255, 255), color(0, 0, 0), Состояние_детали_toString(Деталь_10.состояние));
}
