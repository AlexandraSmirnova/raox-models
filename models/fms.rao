constant double Длительность_погрузки_на_тележку = 1.5;
constant double Длительность_доставки_тележкой = 2.0;
constant double Длительность_устаноки_на_станок = 1.0;
constant double Длительность_разгрузки_станка = 0.5;
constant double Длительность_возврата_робота = 0.2;

sequence Экспоненциальный = double exponential(123456789);

enum Положение {
	СТАНОК_1,
	СТАНОК_2,
	СТАНОК_3,
	НАКОПИТЕЛЬ_1,
	НАКОПИТЕЛЬ_2,
	ТЕЛЕЖКА_1_Н, ТЕЛЕЖКА_1_К,
	ТЕЛЕЖКА_2_Н, ТЕЛЕЖКА_2_К,
	НИГДЕ
}

type Накопители {
	int номер;
	Положение положение;
	int максимальное_количество = 25;
	int текущее_количество = 0;
}
resource накопитель_1 = Накопители.create(1, Положение.НАКОПИТЕЛЬ_1, *, 10);
resource накопитель_2 = Накопители.create(2, Положение.НАКОПИТЕЛЬ_2, *, *);

enum Состояние_тележки {СВОБОДНА, ЗАНЯТА, ЗАГРУЖЕНА, ПЕРЕМЕЩАЕТСЯ, ПРИБЫЛА, ОЖИДАЕТ}
type Тележки {
	int номер;
	Положение положение;
	Состояние_тележки состояние = Состояние_тележки.СВОБОДНА;
}
resource тележка_1 = Тележки.create(1, Положение.ТЕЛЕЖКА_1_Н, *);
resource тележка_2 = Тележки.create(2, Положение.ТЕЛЕЖКА_2_Н, *);

enum Состояние_робота {СВОБОДЕН, ЗАНЯТ}
type Роботы {
	int номер;
	Положение положение;
	Состояние_робота состояние = Состояние_робота.СВОБОДЕН;
}
resource робот_1 = Роботы.create(1, Положение.НАКОПИТЕЛЬ_1, *);
resource робот_2 = Роботы.create(2, Положение.ТЕЛЕЖКА_1_К, *);
resource робот_3 = Роботы.create(3, Положение.ТЕЛЕЖКА_2_К, *);

enum Состояние_станка {СВОБОДЕН, ЗАГРУЖАЕТСЯ, ГОТОВ_К_ОБРАБОТКЕ, РАБОТАЕТ, РАЗГРУЖАЕТСЯ, ЗАКОНЧИЛ_ОБРАБОТКУ}
type Станки {
	int номер;
	Положение положение;
	Состояние_станка состояние = Состояние_станка.СВОБОДЕН;
	double длительность_обработки;
}
resource станок_1 = Станки.create(1, Положение.СТАНОК_1, *, 28);
resource станок_2 = Станки.create(2, Положение.СТАНОК_2, *, 28);
resource станок_3 = Станки.create(3, Положение.СТАНОК_3, *, 15);

enum Состояние_детали {ХРАНИТСЯ, ТРАНСПОРТИРУЕТСЯ, ОБРАБАТЫВАЕТСЯ, ОБРАБОТКА_ЗАКОНЧЕНА}
type Детали {
	int номер;
	Положение положение = Положение.НАКОПИТЕЛЬ_1;
	Состояние_детали состояние = Состояние_детали.ХРАНИТСЯ;
}
resource деталь_1 = Детали.create(1, *, *);
resource деталь_2 = Детали.create(2, *, *);
resource деталь_3 = Детали.create(3, *, *);
resource деталь_4 = Детали.create(4, *, *);
resource деталь_5 = Детали.create(5, *, *);
resource деталь_6 = Детали.create(6, *, *);
resource деталь_7 = Детали.create(7, *, *);
resource деталь_8 = Детали.create(8, *, *);
resource деталь_9 = Детали.create(9, *, *);
resource деталь_10 = Детали.create(10, *, *);

event Таймер() {
	Таймер.plan(currentTime + 0.5);
}

set init() {
//	Таймер.plan(0);
}

set terminateCondition() {
	return накопитель_2.текущее_количество == 10 or currentTime >= 1000;
}

operation Погрузка_детали() {
	relevant накопитель = Накопители.select(накопитель.номер == 1
		and накопитель.текущее_количество > 0
	);
	relevant деталь = Детали.select(деталь.положение == Положение.НАКОПИТЕЛЬ_1
	);
	relevant робот = Роботы.select(робот.номер == 1
		and робот.положение == Положение.НАКОПИТЕЛЬ_1
		and робот.состояние == Состояние_робота.СВОБОДЕН
	);
	relevant тележка = Тележки.select(тележка.номер == 1
		and тележка.положение == Положение.ТЕЛЕЖКА_1_Н
		and тележка.состояние == Состояние_тележки.СВОБОДНА
	);

	set begin() {
		накопитель.текущее_количество--;

		деталь.состояние = Состояние_детали.ТРАНСПОРТИРУЕТСЯ;
		робот.состояние = Состояние_робота.ЗАНЯТ;
		тележка.состояние = Состояние_тележки.ЗАНЯТА;

		робот.положение = Положение.НИГДЕ;
		деталь.положение = робот.положение;
	}

	set duration() {
		return Экспоненциальный.next(1.0 / Длительность_погрузки_на_тележку);
	}

	set end() {
		робот.состояние = Состояние_робота.СВОБОДЕН;
		тележка.состояние = Состояние_тележки.ЗАГРУЖЕНА;

		робот.положение = Положение.ТЕЛЕЖКА_1_Н;
		деталь.положение = робот.положение;
	}
}

operation Доставка_детали(int номер_тележки, Положение откуда, Положение куда) {
	relevant тележка = Тележки.select(тележка.положение == откуда
		and тележка.состояние == Состояние_тележки.ЗАГРУЖЕНА
	);
	relevant деталь = Детали.select(деталь.положение == откуда
	);

	set begin() {
		тележка.состояние = Состояние_тележки.ПЕРЕМЕЩАЕТСЯ;
	}

	set duration() {
		return Экспоненциальный.next(1.0 / Длительность_доставки_тележкой);
	}

	set end() {
		тележка.состояние = Состояние_тележки.ПРИБЫЛА;

		тележка.положение = куда;
		деталь.положение = тележка.положение;
	}
}

operation Установка_на_станке(Положение положение_станка, Положение положение_детали) {
	relevant станок = Станки.select(станок.положение == положение_станка
		and станок.состояние == Состояние_станка.СВОБОДЕН
	);
	relevant тележка = Тележки.select(тележка.положение == положение_детали
		and тележка.состояние == Состояние_тележки.ПРИБЫЛА
	);
	relevant робот = Роботы.select(робот.положение == положение_детали
		and робот.состояние == Состояние_робота.СВОБОДЕН
	);
	relevant деталь = Детали.select(деталь.положение == положение_детали);

	set begin() {
		станок.состояние = Состояние_станка.ЗАГРУЖАЕТСЯ;
		тележка.состояние = Состояние_тележки.ОЖИДАЕТ;
		робот.состояние = Состояние_робота.ЗАНЯТ;
	}

	set duration() {
		return Экспоненциальный.next(1.0 / Длительность_устаноки_на_станок);
	}

	set end() {
		станок.состояние = Состояние_станка.ГОТОВ_К_ОБРАБОТКЕ;
		тележка.состояние = Состояние_тележки.СВОБОДНА;
		робот.состояние = Состояние_робота.СВОБОДЕН;

		робот.положение = станок.положение;
		деталь.положение = станок.положение;
	}
}

operation Обработка_на_станке(Положение положение_станка) {
	relevant станок = Станки.select(станок.положение == положение_станка
		and станок.состояние == Состояние_станка.ГОТОВ_К_ОБРАБОТКЕ
	);
	relevant деталь = Детали.select(деталь.положение == положение_станка
	);

	set begin() {
		станок.состояние = Состояние_станка.РАБОТАЕТ;
		деталь.состояние = Состояние_детали.ОБРАБАТЫВАЕТСЯ;
	}

	set duration() {
		return станок.длительность_обработки;
	}

	set end() {
		станок.состояние = Состояние_станка.ЗАКОНЧИЛ_ОБРАБОТКУ;
		деталь.состояние = Состояние_детали.ОБРАБОТКА_ЗАКОНЧЕНА;
	}
}

operation Перегрузка_со_станка_на_тележку(Положение положение_станка) {
	relevant станок = Станки.select(станок.положение == положение_станка
		and станок.состояние == Состояние_станка.ЗАКОНЧИЛ_ОБРАБОТКУ
	);
	relevant робот = Роботы.select(робот.состояние == Состояние_робота.СВОБОДЕН
		and робот_связан_со_станком(робот.номер, станок.номер)
	);
	relevant тележка = Тележки.select(тележка.номер == 2
		and тележка.состояние == Состояние_тележки.СВОБОДНА
		and тележка.положение == Положение.ТЕЛЕЖКА_2_Н
	);
	relevant деталь = Детали.select(деталь.положение == положение_станка
	);

	set begin() {
		станок.состояние = Состояние_станка.РАЗГРУЖАЕТСЯ;
		робот.состояние = Состояние_робота.ЗАНЯТ;
		тележка.состояние = Состояние_тележки.ЗАНЯТА;
		деталь.состояние = Состояние_детали.ТРАНСПОРТИРУЕТСЯ;
	}

	set duration() {
		return Экспоненциальный.next(1.0 / Длительность_разгрузки_станка);
	}

	set end() {
		станок.состояние = Состояние_станка.СВОБОДЕН;
		робот.состояние = Состояние_робота.СВОБОДЕН;
		тележка.состояние = Состояние_тележки.ЗАГРУЖЕНА;

		робот.положение = Положение.ТЕЛЕЖКА_2_Н;
		деталь.положение = робот.положение;
	}
}

boolean робот_связан_со_станком(int номер_робота, int номер_станка)
{
	if (номер_робота == 2)
		return номер_станка == 1 or номер_станка == 2;
	else if (номер_робота == 3)
		return номер_станка == 3;

	return false;
}

operation Окончание_обработки_на_станке_3() {
	relevant станок = станок_3.select(станок_3.состояние == Состояние_станка.ЗАКОНЧИЛ_ОБРАБОТКУ
	);
	relevant деталь = Детали.select(деталь.положение == станок.положение
	);
	relevant накопитель = накопитель_2.select(any
	);

	set begin() {
		станок.состояние = Состояние_станка.РАЗГРУЖАЕТСЯ;
		деталь.состояние = Состояние_детали.ТРАНСПОРТИРУЕТСЯ;
	}

	set duration() {
		return Экспоненциальный.next(1.0 / Длительность_разгрузки_станка);
	}

	set end() {
		станок.состояние = Состояние_станка.СВОБОДЕН;
		деталь.положение = накопитель.положение;
		деталь.состояние = Состояние_детали.ХРАНИТСЯ;
		накопитель.текущее_количество++;
	}
}

operation Возврат_робота() {
	relevant робот = Роботы.select(робот.положение != место_возврата_робота(робот.положение)
		and робот.состояние == Состояние_робота.СВОБОДЕН
	);

	set begin() {
		робот.состояние = Состояние_робота.ЗАНЯТ;
	}

	set duration() {
		return Длительность_возврата_робота;
	}

	set end() {
		робот.состояние = Состояние_робота.СВОБОДЕН;
		робот.положение = место_возврата_робота(робот.положение);
	}
}

Положение место_возврата_робота(Положение текущее_место) {
	if (текущее_место == Положение.ТЕЛЕЖКА_1_Н)
		return Положение.НАКОПИТЕЛЬ_1;
	else if (текущее_место == Положение.СТАНОК_1 || текущее_место == Положение.СТАНОК_2 || текущее_место == Положение.ТЕЛЕЖКА_2_Н)
		return Положение.ТЕЛЕЖКА_1_К;
	else if (текущее_место == Положение.СТАНОК_3)
		return Положение.ТЕЛЕЖКА_2_К;
	else
		return текущее_место;
}

operation Возврат_тележки(int номер_тележки, Положение откуда, Положение куда) {
	relevant тележка = Тележки.select(тележка.положение == откуда
		and тележка.состояние == Состояние_тележки.СВОБОДНА
	);

	set begin() {
		тележка.состояние = Состояние_тележки.ЗАНЯТА;
	}

	set duration () {
		return Экспоненциальный.next(1.0 / Длительность_доставки_тележкой);
	}

	set end() {
		тележка.состояние = Состояние_тележки.СВОБОДНА;
		тележка.положение = куда;
	}
}

dpt Model {
	activity погрузка_детали checks Погрузка_детали();
	activity доставка_детали_на_тележке_1 checks Доставка_детали(1, Положение.ТЕЛЕЖКА_1_Н, Положение.ТЕЛЕЖКА_1_К);
	activity доставка_детали_на_тележке_2 checks Доставка_детали(2, Положение.ТЕЛЕЖКА_2_Н, Положение.ТЕЛЕЖКА_2_К);
	activity установка_на_станке_1 checks Установка_на_станке(Положение.СТАНОК_1, Положение.ТЕЛЕЖКА_1_К);
	activity установка_на_станке_2 checks Установка_на_станке(Положение.СТАНОК_2, Положение.ТЕЛЕЖКА_1_К);
	activity установка_на_станке_3 checks Установка_на_станке(Положение.СТАНОК_3, Положение.ТЕЛЕЖКА_2_К);
	activity обработка_на_станке_1 checks Обработка_на_станке(Положение.СТАНОК_1);
	activity обработка_на_станке_2 checks Обработка_на_станке(Положение.СТАНОК_2);
	activity обработка_на_станке_3 checks Обработка_на_станке(Положение.СТАНОК_3);
	activity перегрузка_со_станка_1_на_тележку checks Перегрузка_со_станка_на_тележку(Положение.СТАНОК_1);
	activity перегрузка_со_станка_2_на_тележку checks Перегрузка_со_станка_на_тележку(Положение.СТАНОК_2);
	activity окончание_обработки_на_станке_3 checks Окончание_обработки_на_станке_3();

	activity возврат_робота checks Возврат_робота();
	activity возврат_тележки_1 checks Возврат_тележки(1, Положение.ТЕЛЕЖКА_1_К, Положение.ТЕЛЕЖКА_1_Н);
	activity возврат_тележки_2 checks Возврат_тележки(2, Положение.ТЕЛЕЖКА_2_К, Положение.ТЕЛЕЖКА_2_Н);
}

frame Frame {
	background(800, 600, Color.WHITE);

	text('Время:', 10, 5, Color.BLACK);
	text(currentTime, 60, 5, Color.BLACK);

	text('станок 1', 10, 70, Color.BLACK);
	text(станок_1.состояние, 350, 70, Color.BLACK);
	text(станок_1.положение, 600, 70, Color.BLACK);
	text('станок 2', 10, 85, Color.BLACK);
	text(станок_2.состояние, 350, 85, Color.BLACK);
	text(станок_2.положение, 600, 85, Color.BLACK);
	text('станок 3', 10, 100, Color.BLACK);
	text(станок_3.состояние, 350, 100, Color.BLACK);
	text(станок_3.положение, 600, 100, Color.BLACK);

	text('тележка 1', 10, 125, Color.BLACK);
	text(тележка_1.состояние, 350, 125, Color.BLACK);
	text(тележка_1.положение, 600, 125, Color.BLACK);
	text('тележка 2', 10, 140, Color.BLACK);
	text(тележка_2.состояние, 350, 140, Color.BLACK);
	text(тележка_2.положение, 600, 140, Color.BLACK);

	text('робот 1', 10, 165, Color.BLACK);
	text(робот_1.состояние, 350, 165, Color.BLACK);
	text(робот_1.положение, 600, 165, Color.BLACK);
	text('робот 2', 10, 180, Color.BLACK);
	text(робот_2.состояние, 350, 180, Color.BLACK);
	text(робот_2.положение, 600, 180, Color.BLACK);
	text('робот 3', 10, 195, Color.BLACK);
	text(робот_3.состояние, 350, 195, Color.BLACK);
	text(робот_3.положение, 600, 195, Color.BLACK);

	text('Кол-во детале в 1-м накопителе', 10, 220, Color.BLACK);
	text(накопитель_1.текущее_количество, 350, 220, Color.BLACK);
	text('Кол-во детале в 2-м накопителе', 10, 235, Color.BLACK);
	text(накопитель_2.текущее_количество, 350, 235, Color.BLACK);

	text('деталь 1', 10, 300, Color.BLACK);
	text(деталь_1.положение, 350, 300, Color.BLACK);
	text(деталь_1.состояние, 600, 300, Color.BLACK);
	text('деталь 2', 10, 315, Color.BLACK);
	text(деталь_2.положение, 350, 315, Color.BLACK);
	text(деталь_2.состояние, 600, 315, Color.BLACK);
	text('деталь 3', 10, 330, Color.BLACK);
	text(деталь_3.положение, 350, 330, Color.BLACK);
	text(деталь_3.состояние, 600, 330, Color.BLACK);
	text('деталь 4', 10, 345, Color.BLACK);
	text(деталь_4.положение, 350, 345, Color.BLACK);
	text(деталь_4.состояние, 600, 345, Color.BLACK);
	text('деталь 5', 10, 360, Color.BLACK);
	text(деталь_5.положение, 350, 360, Color.BLACK);
	text(деталь_5.состояние, 600, 360, Color.BLACK);
	text('деталь 6', 10, 375, Color.BLACK);
	text(деталь_6.положение, 350, 375, Color.BLACK);
	text(деталь_6.состояние, 600, 375, Color.BLACK);
	text('деталь 7', 10, 390, Color.BLACK);
	text(деталь_7.положение, 350, 390, Color.BLACK);
	text(деталь_7.состояние, 600, 390, Color.BLACK);
	text('деталь 8', 10, 405, Color.BLACK);
	text(деталь_8.положение, 350, 405, Color.BLACK);
	text(деталь_8.состояние, 600, 405, Color.BLACK);
	text('деталь 9', 10, 420, Color.BLACK);
	text(деталь_9.положение, 350, 420, Color.BLACK);
	text(деталь_9.состояние, 600, 420, Color.BLACK);
	text('деталь 10', 10, 435, Color.BLACK);
	text(деталь_10.положение, 350, 435, Color.BLACK);
	text(деталь_10.состояние, 600, 435, Color.BLACK);
}
